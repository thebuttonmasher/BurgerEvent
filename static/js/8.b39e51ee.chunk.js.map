{"version":3,"sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","axios","post","then","email","test","Content","styled","Container","TextWrapper","withTranslation","title","content","t","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","Button"],"mappings":"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","file":"static/js/8.b39e51ee.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setErrors(validate(values));\r\n    // Your url for API\r\n    const url = \"\";\r\n    if (Object.keys(values).length === 3) {\r\n      axios\r\n        .post(url, {\r\n          ...values,\r\n        })\r\n        .then(() => {\r\n          setShouldSubmit(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues(\"\");\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Diatery Restrictions\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"sourceRoot":""}